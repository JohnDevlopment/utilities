#!/bin/env wish

package require utilities
package require tk_widgets
package require json
package require json::write

const RootDir [file dirname [file normalize $argv0]]
const DateFormat "%D %l:%M:%S %p"
const TitleBase Diary

wm title . Diary
wm protocol . WM_DELETE_WINDOW {
    if {$FileModified} {
        set yn [tk_messageBox -parent . -title "Unsaved Changes" -type yesnocancel -icon question \
            -message "You have unsaved changes. Do you want to save those changes?"]
        if {$yn eq "yes"} {
            # File cannot be modified (flag = true) if no file is open, so only
            # check if the filename is "untitled" or not -- it will not be empty string
            if {$CurrentFile eq "untitled"} {
                set temp saveas
            } else {
                set temp save
            }
            set code [catch [list fileCommand $temp] err]
            if {$code} {
                printErrorToStdout "Error from command \"fileCommand $temp\"" $err
                exit 1
            }
        } elseif {$yn eq "cancel"} {
            unset yn
            return
        }
    }
    exit
}
wm minsize . 663 558

#pack [ttk::notebook .nb] -fill both -expand 1
place [ttk::notebook .nb] -relwidth 1 -relheight 0.95 -x 0 -rely 0.05

settemp t_srcdir [file join $RootDir src]

source [file join $t_srcdir globals.tcl]
source [file join $t_srcdir proc.tcl]
source [file join $t_srcdir write.tk]

# Menu buttons: they go *before* the notebook
ttk::frame .menuButtons

ttk::menubutton .menuButtons.file -menu .menuButtons.file.menu -text File
menu .menuButtons.file.menu -tearoff 0
.menuButtons.file.menu add command -label New -command {fileCommand new}
.menuButtons.file.menu add command -label Open... -command {fileCommand open}
.menuButtons.file.menu add command -label Save -command {fileCommand save}
.menuButtons.file.menu add command -label "Save As..." -command {fileCommand saveas}
.menuButtons.file.menu add command -label Close -command {fileCommand close}
.menuButtons.file.menu add command -label Quit -command [wm protocol . WM_DELETE_WINDOW]

ttk::menubutton .menuButtons.edit -menu .menuButtons.edit.menu -text Edit
menu .menuButtons.edit.menu -tearoff 0
.menuButtons.edit.menu add command -label Undo -accelerator "Ctrl-z" -command {
    textboxFocused .nb.frame1.text.text {%W edit undo}
}
.menuButtons.edit.menu add command -label Redo -accelerator "Ctrl-Shift-z" -command {
    textboxFocused .nb.frame1.text.text {%W edit redo}
}
.menuButtons.edit.menu add separator
.menuButtons.edit.menu add command -label Cut -accelerator "Ctrl-x" -command {
    textboxFocused .nb.frame1.text.text {tk_textCut %W}
}
.menuButtons.edit.menu add command -label Copy -accelerator "Ctrl-c" -command {
    textboxFocused .nb.frame1.text.text {tk_textCopy %W}
}
.menuButtons.edit.menu add command -label Paste -accelerator "Ctrl-v" -command {
    textboxFocused .nb.frame1.text.text {tk_textPaste %W}
}

ttk::menubutton .menuButtons.tools -menu .menuButtons.tools.menu -text Tools
menu .menuButtons.tools.menu -tearoff 0
.menuButtons.tools.menu add command -label "Insert Date" -command {
    settemp focus [focus -displayof .]
    if {$focus eq ".nb.frame1.text.text"} {
        settemp sec [clock seconds]
        exw subcmd .nb.frame1.text instate normal {
            exw subcmd .nb.frame1.text insert insert [clock format $sec -format $DateFormat]
        }
    }
}

#pack .menuButtons -side top -anchor n -fill x -expand 1 -before .nb
place .menuButtons -x 0 -y 0 -relwidth 1 -relheight 0.05
    settemp children [winfo children .menuButtons]
    pack {*}$children -side left -anchor n

#bind . <3> {puts [wm geometry .]}
