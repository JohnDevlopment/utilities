'\"
'\" Generated from file '' by tcllib/doctools with format 'nroff'
'\" Copyright (c) John Russell 2021
'\"
.TH "utilities" n 1\&.0  "Tcl Utility Functions"
.\" The -*- nroff -*- definitions below are for supplemental macros used
.\" in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.  The first argument is ignored and used for recording
.\"	the version when the .VS was added, so that the sidebars can be
.\"	found and removed when they reach a certain age.  If another argument
.\"	is present, then a line break is forced before starting the sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options for a Tk widget. The manpage
.\"	argument defines where to look up the standard options; if
.\"	omitted, defaults to "options". The options follow on successive
.\"	lines, in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options for a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option.  cmdName gives the
.\"	option's name as specified in the class command, dbName gives
.\"	the option's name in the option database, and dbClass gives
.\"	the option's class in the option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 in quotes, then arg2 normally (for trailing punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print an open parenthesis, arg1 in quotes, then arg2 normally
.\"	(for trailing punctuation) and then a closing parenthesis.
.\"
.\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = starting y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = starting y location
.\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro to handle page bottom:  finish off current
.\"	# box/sidebar if in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\*(So manual entry for details on the standard options.
..
.\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks to word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens and quotation marks to word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.BS
.SH NAME
utilities \- Tcl Utility Functions
.SH SYNOPSIS
package require \fButilities  ?1\&.0?\fR
.sp
assert \fIexpression\fR ?\fImessage\fR?
.sp
bitset \fIintVar\fR \fIbit\fR \fIflag\fR
.sp
bool \fIvalue\fR
.sp
const \fIname\fR \fIvalue\fR
.sp
deref \fIvar\fR
.sp
do \fIbody\fR while \fIcond\fR
.sp
lambda \fIargs\fR \fIbody\fR
.sp
lremove \fIlistVar\fR \fIbegin\fR ?\fIend\fR?
.sp
pincr \fIvar\fR ?\fIi\fR?
.sp
random integer ?\fImin\fR? \fImax\fR
.sp
random string \fIlength\fR
.sp
settemp \fIvar\fR ?\fIvalue\fR?
.sp
getOptions \fIspecs\fR \fIoptVar\fR \fIargvVar\fR
.sp
.BE
.SH DESCRIPTION
This package contains a series of handy utility functions that may aid in the development of
Tcl-based applications\&.
The following functions are exported from the package\&.
.TP
assert \fIexpression\fR ?\fImessage\fR?
If \fIexpression\fR evaluates to false the current program exits with a non-zero status,
indicating an error\&.
\fImessage\fR is printed to standard error as this happens; if it is omitted, it defaults to the
standard "assertion failed" message\&.
.sp
To use this function, you need to set  to 0\&.
This is done automatically if the DEBUG enviroment variable is set to a non-zero value\&.
.TP
bitset \fIintVar\fR \fIbit\fR \fIflag\fR
Set or clear the given \fIbit\fR in \fIintVar\fR; set if \fIflag\fR is true, clear otherwise\&.
.TP
bool \fIvalue\fR
Returns 1 if \fIvalue\fR evaluates to true or 0 otherwise\&.
Used for converting between boolean values for mainly logging purposes\&.
.TP
const \fIname\fR \fIvalue\fR
Creates a new variable by the name \fIname\fR and sets its value to \fIvalue\fR\&.
At the time this function is called, \fIname\fR cannot already exist\&.
Returns \fIvalue\fR\&.
.sp
This function creates a readonly variable: once its value is set upon creation, it cannot be changed
again\&. Any attempt to do so will result in an error\&.
.TP
deref \fIvar\fR
Returns the value of the variable \fIvar\fR\&.
.TP
do \fIbody\fR while \fIcond\fR
Implements a do-while loop\&. Evaluates the script \fIbody\fR once and then continues to do so
while \fIcond\fR evaluates to true\&.
.TP
lambda \fIargs\fR \fIbody\fR
Returns an apply lambda function with the arguments \fIargs\fR and \fIbody\fR as the function body\&.
.TP
lremove \fIlistVar\fR \fIbegin\fR ?\fIend\fR?
Removes one or more elements from a list found in the variable \fIlistVar\fR\&.
\fIbegin\fR and \fIend\fR are index values that specify the start and end of a range of elements to remove\&.
Indices are interpreted in the same manner as \fBlreplace\fR\&.
.sp
Returns an empty string\&.
.TP
pincr \fIvar\fR ?\fIi\fR?
Implements a post-fix increment operator in Tcl\&.
Increments the numeric value in \fIvar\fR by the amount specified by \fIi\fR\&.
If \fIi\fR is not provided, then 1 is used as the default\&.
.sp
The return value is the value of \fIvar\fR prior to the increment\&.
.TP
random integer ?\fImin\fR? \fImax\fR
Returns a random integer between \fImin\fR and \fImax\fR\&.
If \fImin\fR is omitted, it defaults to zero\&.
.TP
random string \fIlength\fR
Returns a randomly generated string of \fIlength\fR characters\&.
The string will contain characters between a-z (upper and lowercase) and an underscore\&.
.TP
settemp \fIvar\fR ?\fIvalue\fR?
Creates a temporary value that deletes itself at idle time\&.
Internally, \fIvar\fR gets added to a queue that is processed at the start of the next event loop,
using \fBafter idle\fR\&.
.PP
.PP
These functions belong to the \fB::Options\fR namespace\&.
.TP
getOptions \fIspecs\fR \fIoptVar\fR \fIargvVar\fR
Processes commandline options according to the rules defined in \fIspecs\fR\&.
.sp
\fIspecs\fR is a list of lists containing recognized options, where each element takes the form of {option default}\&.
If the option doesn't contain any special suffixes, the option is treated as a boolean flag:
it is set to true if provided, and false otherwise\&.
If \fIoption\fR ends in "\&.arg", the option expects an argument\&.
\fIdefault\fR is used as the argument in the case that such option is not provided\&.
.sp
The options in \fIargvVar\fR are put into the array variable \fIoptVar\fR, where each index is
an option and its value is the corresponding argument\&.
.PP
.SH COPYRIGHT
.nf
Copyright (c) John Russell 2021

.fi

