'\"
'\" Generated from file '' by tcllib/doctools with format 'nroff'
'\" Copyright (c) John Russell 2021
'\"
.TH "exw_entry" n   "Expanded Tk Widgets"
.\" The -*- nroff -*- definitions below are for supplemental macros used
.\" in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.  The first argument is ignored and used for recording
.\"	the version when the .VS was added, so that the sidebars can be
.\"	found and removed when they reach a certain age.  If another argument
.\"	is present, then a line break is forced before starting the sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options for a Tk widget. The manpage
.\"	argument defines where to look up the standard options; if
.\"	omitted, defaults to "options". The options follow on successive
.\"	lines, in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options for a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option.  cmdName gives the
.\"	option's name as specified in the class command, dbName gives
.\"	the option's name in the option database, and dbClass gives
.\"	the option's class in the option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 in quotes, then arg2 normally (for trailing punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print an open parenthesis, arg1 in quotes, then arg2 normally
.\"	(for trailing punctuation) and then a closing parenthesis.
.\"
.\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = starting y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = starting y location
.\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro to handle page bottom:  finish off current
.\"	# box/sidebar if in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\*(So manual entry for details on the standard options.
..
.\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks to word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens and quotation marks to word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.BS
.SH NAME
exw_entry \- Create and manipulate expanded one-line 'entry' widgets
.SH SYNOPSIS
package require \fBtk_widgets  ?0\&.4?\fR
.sp
exw entry ?\fIoptions\fR? \fIpathName\fR ?\fIidentifier\fR? ?\fIoptions\fR?
.sp
exw subcmd \fIpathName\fR \fIcmd\fR ?args\&.\&.\&.?
.sp
\fIidentifier\fR \fIcmd\fR ?args\&.\&.\&.?
.sp
.BE
.SH DESCRIPTION
The command \fBexw entry\fR creates a new window (given by the \fIpathName\fR argument) and makes
it an expanded \fBttk::entry\fR widget\&.
Options, listed in the section below, can be specified on the commandline to the left of \fIpathName\fR\&.
Options to the right of \fIpathName\fR are forwarded as-is to the \fBttk::entry\fR command\&.
(See the related documentation for details\&.)
The path to the newly created window is returned\&.
At the time this command is invoked \fIpathName\fR must not already exist, yet its parent must exist\&.
.PP
If \fIidentifier\fR is specified a command of the same name is created\&.
At the time this command is invoked, \fIidentifier\fR must not already exist as a command\&.
\fIidentifier\fR cannot have any hyphens or periods\&.
See the section \fBWIDGET COMMAND\fR for a complete description of this command\&.
.SH "WIDGET-SPECIFIC OPTIONS"
The options listed below are only recognized when put to the left of \fIpathName\fR\&.
They are write-only options that can be specified only at the creation of this widget\&.
.TP
\fB-maxlen\fR
If this option is provided, it specifies the maximum length of the text inside the entry\&.
It must be greater than zero to take effect\&.
When active, it causes the entry to reject the adding of characters when the length of the current
string is greater than or equal to this option\&.
If this option is left out or is an empty string it defaults to zero\&.
.TP
\fB-label\fR \fItext\fR
If this option is provided, it specifies a textual string to display in a label to the left of the
entry widget\&.
If the option is left out or is an empty string, no label is displayed\&.
.TP
\fB-scrollx\fR
When this option is present, a horizontal scrollbar is displayed below the entry widget\&.
The scrollbar is setup to scroll the entry widget when the textual data inside it gets too big\&.
.TP
\fB-clearbutton\fR
If this option is present, a button is display inside the right edge of the entry widget that,
when pressed, clears all of the text inside the entry\&.
.PP
.SH "WIDGET COMMAND"
After the entry widget is created, a number of subcommands are available\&.
.TP
exw entry ?\fIoptions\fR? \fIpathName\fR ?\fIidentifier\fR? ?\fIoptions\fR?
This command creates a new extended entry widget located at \fIpathName\fR\&.
The options to the left of \fIpathName\fR shall be one or more of the options listed above\&.
The options to the right can be any of the valid options for \fBttk::entry\fR\&.
If this command succeeds \fIpathName\fR is returned\&.
.TP
exw subcmd \fIpathName\fR \fIcmd\fR ?args\&.\&.\&.?
This lets you access any of the entry's widget commands\&.
This command is equivelent to \fIpathName\fR\&.entry \fIcmd\fR ?args\&.\&.\&.?\&.
.TP
\fIidentifier\fR \fIcmd\fR ?args\&.\&.\&.?
Use this command as an alternative to \fBexw subcmd\fR\&.
\fIidentifier\fR forwards its arguments to the command \fIpathName\fR\&.
.PP
.SH EXAMPLES
.PP
Create an entry with a max length of thirty characters\&.
No identifier is specified\&.
.CS


exw entry -maxlen 30 \&.without
exw pack \&.without
exw subcmd \&.without insert end "I am a good programmer!"

.CE
.PP
Creates an entry with the identifier \fIENTRY\fR\&.
.CS


exw entry \&.with ENTRY
exw pack \&.with
ENTRY insert end "I am a good programmer!"

.CE
.SH COPYRIGHT
.nf
Copyright (c) John Russell 2021

.fi

